---
- name: 階段一：K8s 離線物料準備與打包
  hosts: localhost
  connection: local
  become: yes
  vars:
    k8s_version: "v1.34.1"
    kube_version: "1.34.1"
    offline_dir: "/home/administrator/kubernetes/offline"
    pkg_dir: "{{ offline_dir }}/offline_packages"
    k8s_accelerator: "registry.aliyuncs.com/google_containers"
    calico_version: "v3.30.3"
    pod_network_cidr: "192.168.0.0/16"

  tasks:
    - name: 創建必要目錄
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ offline_dir }}"
        - "{{ pkg_dir }}"

    - name: 設置 Docker APT 倉庫
      block:
        - name: 安裝前置依賴
          apt:
            name: ['ca-certificates', 'curl', 'gnupg']
            state: present
            update_cache: yes

        - name: 創建 APT keyrings 目錄
          file:
            path: /etc/apt/keyrings
            state: directory
            mode: '0755'

        - name: 下載 Docker GPG Key
          shell: "curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc"

        - name: 添加 Docker 倉庫
          apt_repository:
            repo: "deb [arch={{ ansible_architecture }} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
            state: present

    - name: 設置 K8s APT 倉庫
      block:
        - name: 下載 K8s GPG Key
          shell: "curl -fsSL https://pkgs.k8s.io/core:/stable:/v{{ kube_version | regex_replace('\\.\\d+$', '') }}/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg"

        - name: 添加 K8s 倉庫
          apt_repository:
            repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ kube_version | regex_replace('\\.\\d+$', '') }}/deb/ /"
            state: present

        - name: 更新 APT 緩存
          apt:
            update_cache: yes

    - name: 強制下載所有核心套件 (第一波：Docker, K8s 核心與所有依賴)
      shell: "apt-get download {{ item }}"
      args:
        chdir: "{{ pkg_dir }}"
      loop:
        - containerd.io
        - docker-ce
        - docker-ce-cli
        - cri-tools
        - kubernetes-cni
        - conntrack
        - kubelet={{ kube_version }}-*
        - kubeadm={{ kube_version }}-*
        - kubectl={{ kube_version }}-*

    - name: 強制下載所有套件的運行時依賴 (第二波：確保次級依賴補齊)
      shell: "apt-get install -y --reinstall --download-only {{ item }} -o Dir::Cache::archives='.'"
      args:
        chdir: "{{ pkg_dir }}"
      loop:
        - containerd.io
        - docker-ce
        - docker-ce-cli
        - cri-tools
        - kubernetes-cni
        - conntrack
        - kubelet
        - kubeadm
        - kubectl

    - name: 創建 required_images.txt 鏡像清單
      copy:
        dest: "{{ offline_dir }}/required_images.txt"
        content: |
          registry.k8s.io/kube-apiserver:v1.34.1
          registry.k8s.io/kube-controller-manager:v1.34.1
          registry.k8s.io/kube-scheduler:v1.34.1
          registry.k8s.io/kube-proxy:v1.34.1
          registry.k8s.io/coredns/coredns:v1.12.1
          registry.k8s.io/pause:3.10
          registry.k8s.io/etcd:3.6.4-0
          docker.io/calico/cni:v3.30.3
          docker.io/calico/csi:v3.30.3
          docker.io/calico/node-driver-registrar:v3.30.3
          docker.io/calico/node:v3.30.3
          docker.io/calico/pod2daemon-flexvol:v3.30.3
          docker.io/calico/typha:v3.30.3
        mode: '0644'

    - name: 下載 Tigera Operator Manifest
      get_url:
        url: "https://raw.githubusercontent.com/projectcalico/calico/{{ calico_version }}/manifests/tigera-operator.yaml"
        dest: "{{ offline_dir }}/tigera-operator.yaml"
        mode: '0644'

    - name: 下載 Calico Custom Resources Manifest
      get_url:
        url: "https://raw.githubusercontent.com/projectcalico/calico/{{ calico_version }}/manifests/custom-resources.yaml"
        dest: "{{ offline_dir }}/custom-resources.yaml"
        mode: '0644'

    - name: 處理 K8s 核心和 Calico 鏡像並打包
      include_tasks: image_handling.yml

    - name: 製作最終離線資源包
      archive:
        path: "{{ offline_dir }}/*"
        dest: "{{ offline_dir }}/k8s_offline_bundle_{{ k8s_version }}.tar.gz"
        format: gz
      args:
        exclude_path: "{{ offline_dir }}/k8s_offline_bundle_{{ k8s_version }}.tar.gz"

    - name: 顯示打包完成
      debug:
        msg: "離線資源包 k8s_offline_bundle_{{ k8s_version }}.tar.gz 已在 {{ offline_dir }} 中創建。"
